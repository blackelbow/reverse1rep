{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\CJ's Ultra Machine\\\\Desktop\\\\reverseonerep\\\\src\\\\components\\\\CalculatorView.js\";\nimport React from 'react';\n\nfunction calculate() {\n  var max = document.getElementById(\"oneRM\");\n  var weight = document.getElementById(\"goalWeight\");\n  var reps = document.getElementById(\"goalReps\");\n\n  if (reps.value > 0 && weight.value > 0) {\n    console.log('condition 1');\n    alert(\"Enter EITHER goal reps or goal weight, but not BOTH\");\n  } else if (!max.value > 0 && !weight.value > 0 && !reps.value > 0) {\n    console.log('condition 2');\n    alert(\"Enter a one rep max and either goal reps or goal weight\");\n  } else if (max.value > 0 && !(weight.value > 0 || reps.value > 0)) {\n    console.log('condition 3');\n    alert(\"Enter goal reps or goal weight\");\n  } else if (!max.value > 0) {\n    console.log('condition 4');\n    alert(\"Enter a one rep max\");\n  } else if (weight.value > 0) {\n    console.log('condition 5');\n  } else if (reps.value > 0) {\n    console.log('condition 6');\n  } else {\n    alert(\"Unknown error during calculation. Try doing 'fahves'.\");\n  } //note: better than these alerts would be some js validation that disables one field when other is used\n  //note: milligram has no form validation css pseudo classes\n\n}\n\nconst CalculatorView = props => {\n  var inputStyle = {\n    position: 'sticky',\n    width: '50%',\n    textAlign: 'center',\n    justifyContent: 'center',\n    height: '10rem',\n    marginBottom: '25rem',\n    marginTop: '5rem',\n    paddingBottom: '5rem'\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }\n  }, props.visible ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    style: inputStyle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 18\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"fieldset\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    for: \"oneRM\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 25\n    }\n  }, \"Enter One Rep Max (Lbs)\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"number\",\n    id: \"oneRM\",\n    min: \"1\",\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 25\n    }\n  }, \"THEN\"), /*#__PURE__*/React.createElement(\"label\", {\n    for: \"goalWeight\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 25\n    }\n  }, \"Enter Goal Weight\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"number\",\n    id: \"goalWeight\",\n    min: \"1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 25\n    }\n  }, \"OR\"), /*#__PURE__*/React.createElement(\"label\", {\n    for: \"goalReps\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 25\n    }\n  }, \"Enter Goal Reps\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"number\",\n    id: \"goalReps\",\n    min: \"1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 25\n    }\n  }))), /*#__PURE__*/React.createElement(\"button\", {\n    class: \"button-large\",\n    onClick: calculate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 17\n    }\n  }, \"Calculate\")) : /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 19\n    }\n  }));\n};\n\nexport default CalculatorView;","map":{"version":3,"sources":["C:/Users/CJ's Ultra Machine/Desktop/reverseonerep/src/components/CalculatorView.js"],"names":["React","calculate","max","document","getElementById","weight","reps","value","console","log","alert","CalculatorView","props","inputStyle","position","width","textAlign","justifyContent","height","marginBottom","marginTop","paddingBottom","visible"],"mappings":"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","sourcesContent":["import React from 'react';\r\n\r\nfunction calculate () {\r\n    var max=document.getElementById(\"oneRM\")\r\n    var weight=document.getElementById(\"goalWeight\")\r\n    var reps=document.getElementById(\"goalReps\")\r\n\r\n    if (reps.value>0 && weight.value>0) {\r\n        console.log('condition 1')\r\n        alert(\"Enter EITHER goal reps or goal weight, but not BOTH\")\r\n    }\r\n    else if (!max.value>0 && !weight.value>0 && !reps.value>0){\r\n        console.log('condition 2')\r\n        alert(\"Enter a one rep max and either goal reps or goal weight\")\r\n    }\r\n    else if (max.value>0 && !(weight.value>0 || reps.value>0)){\r\n        console.log('condition 3')\r\n        alert(\"Enter goal reps or goal weight\")\r\n    }\r\n    else if (!max.value>0) {\r\n        console.log('condition 4')\r\n        alert(\"Enter a one rep max\")\r\n    }\r\n    else if (weight.value>0){\r\n        console.log('condition 5')\r\n    }\r\n    else if (reps.value>0){\r\n        console.log('condition 6')\r\n    }\r\n    else {alert (\"Unknown error during calculation. Try doing 'fahves'.\")}\r\n    //note: better than these alerts would be some js validation that disables one field when other is used\r\n    //note: milligram has no form validation css pseudo classes\r\n\r\n\r\n}\r\n\r\nconst CalculatorView = (props) => {\r\n\r\n\r\n    var inputStyle = {\r\n        position: 'sticky',\r\n        width: '50%',\r\n        textAlign: 'center',\r\n        justifyContent: 'center',\r\n        height: '10rem',\r\n        marginBottom: '25rem', \r\n        marginTop: '5rem',\r\n        paddingBottom: '5rem'\r\n        \r\n    }\r\n    return ( \r\n        <div>\r\n                { props.visible\r\n                ?<div className=\"container\" style={inputStyle}>\r\n\r\n                <form>\r\n                    <fieldset>\r\n                        <label for=\"oneRM\">Enter One Rep Max (Lbs)</label>\r\n                        <input type=\"number\" id=\"oneRM\" min=\"1\" required></input>\r\n                        <p>THEN</p>\r\n                        <label for=\"goalWeight\">Enter Goal Weight</label>\r\n                        <input type=\"number\" id=\"goalWeight\" min=\"1\"></input>\r\n                        <p>OR</p>\r\n                        <label for=\"goalReps\">Enter Goal Reps</label>\r\n                        <input type=\"number\" id=\"goalReps\" min=\"1\"></input>\r\n                    </fieldset>\r\n                </form>\r\n\r\n                <button class=\"button-large\" onClick={calculate}>Calculate</button>\r\n\r\n                </div>\r\n                : <div></div>\r\n                }\r\n            \r\n            </div>\r\n     );\r\n}\r\n \r\nexport default CalculatorView;"]},"metadata":{},"sourceType":"module"}